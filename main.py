import logging
import csv
import requests
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters, ConversationHandler

BOT_TOKEN = "8422375930:AAHxRspRh_Ke6q8RPASMmuH9Kbl9CLbNP3A"
RAZORPAY_KEY_ID = "rzp_live_XlFFKckEFxqvnb"
RAZORPAY_KEY_SECRET = "5Mw01AJWo0kxxPYqM3FutyI8"

(RAASHI, NAME, PHONE, GENDER, STATE, DOB, TOB, EMAIL) = range(8)

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

time_slots = [
    ["12:00 AM ‚Äì 3:00 AM", "3:01 AM ‚Äì 6:00 AM"],
    ["6:01 AM ‚Äì 9:00 AM", "9:01 AM ‚Äì 12:00 PM"],
    ["12:01 PM ‚Äì 3:00 PM", "3:01 PM ‚Äì 6:00 PM"],
    ["6:01 PM ‚Äì 9:00 PM", "9:01 PM ‚Äì 12:00 AM"]
]

raashi_keyboard = [
    ["‡§Æ‡•á‡§∑", "‡§µ‡•É‡§∑‡§≠", "‡§Æ‡§ø‡§•‡•Å‡§®"],
    ["‡§ï‡§∞‡•ç‡§ï", "‡§∏‡§ø‡§Ç‡§π", "‡§ï‡§®‡•ç‡§Ø‡§æ"],
    ["‡§§‡•Å‡§≤‡§æ", "‡§µ‡•É‡§∂‡•ç‡§ö‡§ø‡§ï", "‡§ß‡§®‡•Å"],
    ["‡§Æ‡§ï‡§∞", "‡§ï‡•Å‡§Æ‡•ç‡§≠", "‡§Æ‡•Ä‡§®"]
]

gender_keyboard = [["‡§™‡•Å‡§∞‡•Å‡§∑", "‡§Æ‡§π‡§ø‡§≤‡§æ", "‡§Ö‡§®‡•ç‡§Ø"]]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "\U0001F64F ‡§™‡§µ‡§ø‡§§‡•ç‡§∞ ‡§ú‡•ç‡§Ø‡•ã‡§§‡§ø‡§∑ ‡§∏‡•á‡§µ‡§æ ‡§Æ‡•á‡§Ç ‡§Ü‡§™‡§ï‡§æ ‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§π‡•à‡•§\n‡§Æ‡•à‡§Ç ‡§ó‡•Å‡§∞‡•Å‡§ú‡•Ä, ‡§Ü‡§™‡§ï‡•Ä ‡§ï‡•Å‡§Ç‡§°‡§≤‡•Ä ‡§ï‡•á ‡§Æ‡§æ‡§ß‡•ç‡§Ø‡§Æ ‡§∏‡•á ‡§Æ‡§æ‡§∞‡•ç‡§ó‡§¶‡§∞‡•ç‡§∂‡§® ‡§ï‡§∞‡•Ç‡§Ç‡§ó‡§æ‡•§\n\n‡§ï‡•É‡§™‡§Ø‡§æ ‡§®‡•Ä‡§ö‡•á ‡§∏‡•á ‡§Ö‡§™‡§®‡•Ä ‡§∞‡§æ‡§∂‡§ø ‡§ö‡•Å‡§®‡•á‡§Ç:",
        reply_markup=ReplyKeyboardMarkup(raashi_keyboard, one_time_keyboard=True, resize_keyboard=True)
    )
    return RAASHI

async def get_raashi(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['raashi'] = update.message.text
    await update.message.reply_text("‡§¨‡§π‡•Å‡§§ ‡§¨‡•ù‡§ø‡§Ø‡§æ‡•§ ‡§Ö‡§¨ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§Ö‡§™‡§®‡§æ ‡§™‡•Ç‡§∞‡§æ ‡§®‡§æ‡§Æ ‡§¨‡§§‡§æ‡§è‡§Ç:", reply_markup=ReplyKeyboardRemove())
    return NAME

async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['name'] = update.message.text
    await update.message.reply_text("‡§Ö‡§¨ ‡§Ö‡§™‡§®‡§æ ‡§Æ‡•ã‡§¨‡§æ‡§á‡§≤ ‡§®‡§Ç‡§¨‡§∞ ‡§≠‡•á‡§ú‡•á‡§Ç:")
    return PHONE

async def get_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['phone'] = update.message.text
    await update.message.reply_text("‡§≤‡§ø‡§Ç‡§ó ‡§ö‡•Å‡§®‡•á‡§Ç:", reply_markup=ReplyKeyboardMarkup(gender_keyboard, one_time_keyboard=True, resize_keyboard=True))
    return GENDER

async def get_gender(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['gender'] = update.message.text
    await update.message.reply_text("‡§Ü‡§™‡§ï‡§æ ‡§∞‡§æ‡§ú‡•ç‡§Ø ‡§¨‡§§‡§æ‡§è‡§Ç:", reply_markup=ReplyKeyboardRemove())
    return STATE

async def get_state(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['state'] = update.message.text
    await update.message.reply_text("‡§Ö‡§™‡§®‡•Ä ‡§ú‡§®‡•ç‡§Æ ‡§§‡§ø‡§•‡§ø ‡§¨‡§§‡§æ‡§è‡§Ç (dd-mm-yyyy):")
    return DOB

async def get_dob(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['dob'] = update.message.text
    await update.message.reply_text("‡§ú‡§®‡•ç‡§Æ ‡§ï‡§æ ‡§∏‡§Æ‡§Ø ‡§ö‡•Å‡§®‡•á‡§Ç:", reply_markup=ReplyKeyboardMarkup(time_slots, one_time_keyboard=True, resize_keyboard=True))
    return TOB

async def get_tob(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['tob'] = update.message.text
    await update.message.reply_text("‡§Ö‡§¨ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§Ö‡§™‡§®‡§æ ‡§à‡§Æ‡•á‡§≤ ‡§™‡§§‡§æ ‡§∏‡§æ‡§ù‡§æ ‡§ï‡§∞‡•á‡§Ç:", reply_markup=ReplyKeyboardRemove())
    return EMAIL

async def get_email(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['email'] = update.message.text
    user = context.user_data

    with open('kundali_data.csv', 'a', newline='', encoding='utf-8') as f:
        writer = csv.writer(f)
        writer.writerow([user['raashi'], user['name'], user['phone'], user['gender'], user['state'], user['dob'], user['tob'], user['email']])

    payment_link = generate_payment_link(user['name'], user['email'], user['phone'])

    summary = f"\nüôè ‡§Ü‡§™‡§ï‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§á‡§∏ ‡§™‡•ç‡§∞‡§ï‡§æ‡§∞ ‡§π‡•à:\n\n‡§∞‡§æ‡§∂‡§ø: {user['raashi']}\n‡§®‡§æ‡§Æ: {user['name']}\n‡§Æ‡•ã‡§¨‡§æ‡§á‡§≤: {user['phone']}\n‡§≤‡§ø‡§Ç‡§ó: {user['gender']}\n‡§∞‡§æ‡§ú‡•ç‡§Ø: {user['state']}\n‡§ú‡§®‡•ç‡§Æ ‡§§‡§ø‡§•‡§ø: {user['dob']}\n‡§ú‡§®‡•ç‡§Æ ‡§∏‡§Æ‡§Ø: {user['tob']}\n‡§à‡§Æ‡•á‡§≤: {user['email']}\n\n‡§ï‡•É‡§™‡§Ø‡§æ ‚Çπ49 ‡§ï‡§æ ‡§≠‡•Å‡§ó‡§§‡§æ‡§® ‡§ï‡§∞‡•á‡§Ç ‡§á‡§∏ ‡§≤‡§ø‡§Ç‡§ï ‡§™‡§∞:\n{payment_link}\n\n‡§≠‡•Å‡§ó‡§§‡§æ‡§® ‡§ï‡•á ‡§¨‡§æ‡§¶ ‡§Ü‡§™‡§ï‡•Ä ‡§ï‡•Å‡§Ç‡§°‡§≤‡•Ä 24 ‡§ò‡§Ç‡§ü‡•á ‡§ï‡•á ‡§≠‡•Ä‡§§‡§∞ ‡§à‡§Æ‡•á‡§≤ ‡§™‡§∞ ‡§≠‡•á‡§ú ‡§¶‡•Ä ‡§ú‡§æ‡§è‡§ó‡•Ä‡•§ üôè"

    await update.message.reply_text(summary)
    return ConversationHandler.END

def generate_payment_link(name, email, contact):
    url = "https://api.razorpay.com/v1/payment_links"
    payload = {
        "amount": 4900,
        "currency": "INR",
        "accept_partial": False,
        "description": "Kundali Service by Guruji",
        "customer": {
            "name": name,
            "contact": contact,
            "email": email
        },
        "notify": {
            "sms": True,
            "email": True
        },
        "reminder_enable": True,
        "callback_url": "https://telegram.me/guruji_kundali_bot",
        "callback_method": "get"
    }
    response = requests.post(url, auth=(RAZORPAY_KEY_ID, RAZORPAY_KEY_SECRET), json=payload)
    return response.json().get("short_url", "[‡§≤‡§ø‡§Ç‡§ï ‡§ú‡§®‡§∞‡•á‡§ü ‡§®‡§π‡•Ä‡§Ç ‡§π‡•Å‡§Ü]")

if __name__ == '__main__':
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            RAASHI: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_raashi)],
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
            PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_phone)],
            GENDER: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_gender)],
            STATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_state)],
            DOB: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_dob)],
            TOB: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_tob)],
            EMAIL: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_email)],
        },
        fallbacks=[]
    )

    app.add_handler(conv_handler)
    print("Bot is running...")
    app.run_polling()
